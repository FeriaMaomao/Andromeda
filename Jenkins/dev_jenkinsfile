def envDeployment = "dev"
def MAJOR_VERSION = "1"
def ARTIFACT_VERSION = "${MAJOR_VERSION}.${BUILD_NUMBER}"

pipeline {
	options {
		ansiColor('gnome-terminal')
	}

	agent any

	stages {

		stage('Prepare Stage') {
			steps {
				sh 'docker -v'
                sh 'docker-compose -v'
				sh 'aws --version'
				sh 'phpunit --version'
				sh 'npm --version'
				sh 'composer --version'
			}
		}
        
        stage('Clone Repo') {
			steps {
				checkout scm
			}
		}

        stage('Install Dependencies') {
			steps {
				sh 'php composer.phar install'
			}
		}

		stage('Unit Test & Coverage') {
			steps {
				sh 'cd /Test && phpunit UnitTest'
			}
		}

		stage('SonarQube Analysis') {
			steps {
				withSonarQubeEnv('sonarqube') {
					sh 'node_modules/sonar-scanner/bin/sonar-scanner -X -Dproject.settings=Jenkins/sonar-project.properties -Dsonar.projectVersion=' + ARTIFACT_VERSION + ' '
				}
				sleep(time:5,unit:"SECONDS")
			}
		}

		stage('Quality Gate Analysis') {
			steps {
				timeout(time: 1, unit: 'MINUTES') {
					script  {
						def qg = waitForQualityGate()
						if (qg.status != 'OK') {
							error "Pipeline aborted due to quality gate failure: ${qg.status}"
						}
					}
				}
			}
		}

        stage('Run Script') {
			steps {
				sh 'chmod +x /Docker/Dev/build.sh'
				sh './Docker/Dev/build.sh'
			}
		}

		stage('Deploy') {
			steps {
				sh 'cd /Docker/Dev && docker-compose up -d'
			}
		}
    }
}
